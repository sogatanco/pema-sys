{"version":3,"file":"static/js/5150.b806b03b.chunk.js","mappings":"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","sources":["../node_modules/dayjs/locale/id.js","../node_modules/html-to-pdfmake/index.js"],"sourcesContent":["!function(e,a){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=a(require(\"dayjs\")):\"function\"==typeof define&&define.amd?define([\"dayjs\"],a):(e=\"undefined\"!=typeof globalThis?globalThis:e||self).dayjs_locale_id=a(e.dayjs)}(this,(function(e){\"use strict\";function a(e){return e&&\"object\"==typeof e&&\"default\"in e?e:{default:e}}var t=a(e),_={name:\"id\",weekdays:\"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu\".split(\"_\"),months:\"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember\".split(\"_\"),weekdaysShort:\"Min_Sen_Sel_Rab_Kam_Jum_Sab\".split(\"_\"),monthsShort:\"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des\".split(\"_\"),weekdaysMin:\"Mg_Sn_Sl_Rb_Km_Jm_Sb\".split(\"_\"),weekStart:1,formats:{LT:\"HH.mm\",LTS:\"HH.mm.ss\",L:\"DD/MM/YYYY\",LL:\"D MMMM YYYY\",LLL:\"D MMMM YYYY [pukul] HH.mm\",LLLL:\"dddd, D MMMM YYYY [pukul] HH.mm\"},relativeTime:{future:\"dalam %s\",past:\"%s yang lalu\",s:\"beberapa detik\",m:\"semenit\",mm:\"%d menit\",h:\"sejam\",hh:\"%d jam\",d:\"sehari\",dd:\"%d hari\",M:\"sebulan\",MM:\"%d bulan\",y:\"setahun\",yy:\"%d tahun\"},ordinal:function(e){return e+\".\"}};return t.default.locale(_,null,!0),_}));","// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\r\n// and https://github.com/bpampuch/pdfmake/issues/205\r\n\r\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\r\n\r\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF – use this option to remove them\r\n *   @param  {Boolean} [showHidden=false] TRUE if the 'display:none' elements should be displayed\r\n *   @param  {Boolean} [removeTagClasses=false] TRUE if we don't want to have 'html-TAG' added as a class for each node\r\n *   @param  {Array} [ignoreStyles=[]] An array of style property to ignore\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\r\n//var util = require(\"util\"); // to debug\r\nfunction htmlToPdfMake(htmlText, options) {\r\n  'use strict';\r\n  this.wndw = (options && options.window ? options.window : window);\r\n  this.tableAutoSize = (options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false);\r\n  this.imagesByReference = (options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false);\r\n  this.removeExtraBlanks = (options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false);\r\n  this.showHidden = (options && typeof options.showHidden === \"boolean\" ? options.showHidden : false);\r\n  this.removeTagClasses = (options && typeof options.removeTagClasses === \"boolean\" ? options.removeTagClasses : false);\r\n  this.ignoreStyles = (options && Array.isArray(options.ignoreStyles) ? options.ignoreStyles : []);\r\n\r\n  // A random string to be used in the image references\r\n  var imagesByReferenceSuffix = (Math.random().toString(36).slice(2,8));\r\n\r\n  // Used with the size attribute on the font elements to calculate relative font size\r\n  this.fontSizes = (options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]);\r\n\r\n  // set default styles\r\n  this.defaultStyles = {\r\n    b: {bold:true},\r\n    strong: {bold:true},\r\n    u: {decoration:'underline'},\r\n    del: {decoration:'lineThrough'},\r\n    s: {decoration: 'lineThrough'},\r\n    em: {italics:true},\r\n    i: {italics:true},\r\n    h1: {fontSize:24, bold:true, marginBottom:5},\r\n    h2: {fontSize:22, bold:true, marginBottom:5},\r\n    h3: {fontSize:20, bold:true, marginBottom:5},\r\n    h4: {fontSize:18, bold:true, marginBottom:5},\r\n    h5: {fontSize:16, bold:true, marginBottom:5},\r\n    h6: {fontSize:14, bold:true, marginBottom:5},\r\n    a: {color:'blue', decoration:'underline'},\r\n    strike: {decoration: 'lineThrough'},\r\n    p: {margin:[0, 5, 0, 10]},\r\n    ul: {marginBottom:5,marginLeft:5},\r\n    table: {marginBottom:5},\r\n    th: {bold:true, fillColor:'#EEEEEE'}\r\n  }\r\n\r\n  // store the references to the images\r\n  this.imagesRef = [];\r\n\r\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\r\n  this.changeDefaultStyles = function () {\r\n    for (var keyStyle in options.defaultStyles) {\r\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\r\n        // if we want to remove a default style\r\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\r\n          delete this.defaultStyles[keyStyle];\r\n        } else {\r\n          for (var k in options.defaultStyles[keyStyle]) {\r\n            // if we want to delete a specific property\r\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];\r\n            else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\r\n          }\r\n        }\r\n      } else {\r\n        // if we add default styles\r\n        this.defaultStyles[keyStyle] = {}\r\n        for (var ks in options.defaultStyles[keyStyle]) {\r\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (options && options.defaultStyles) {\r\n    this.changeDefaultStyles();\r\n  }\r\n\r\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\r\n  this.convertHtml = function(htmlText) {\r\n    // Create a HTML DOM tree out of html string\r\n    var parser = new this.wndw.DOMParser();\r\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|ol|ul|li))/gi, \"$1$4\").replace(/(<td([^>]+)?>)\\s+(<table)/gi, \"$1$3\").replace(/(<\\/table>)\\s+(<\\/td>)/gi, \"$1$2\");\r\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\r\n\r\n    var docDef = this.parseElement(parsedHtml.body, []);\r\n\r\n    // remove first level\r\n    return docDef.stack || docDef.text;\r\n  }\r\n\r\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\r\n  this.parseElement = function(element, parents) {\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var nodeNameLowerCase = nodeName.toLowerCase();\r\n    var ret = {text:[]};\r\n    var text, needStack=false;\r\n    var dataset, i, key, _this=this;\r\n\r\n    // ignore some HTML tags\r\n    if (['COLGROUP','COL'].indexOf(nodeName) > -1) return '';\r\n\r\n    switch(element.nodeType) {\r\n      case 3: { // TEXT_NODE\r\n        if (element.textContent) {\r\n          text = element.textContent;\r\n          // check if we have 'white-space' in the parent's style\r\n          // or if a parent is a <PRE>\r\n          var styleParentTextNode = this.parseStyle(parents[parents.length-1], true);\r\n          var hasWhiteSpace = (parents.findIndex(function(p) { return p.nodeName === \"PRE\" })>-1);\r\n          for (i=0; i<styleParentTextNode.length; i++) {\r\n            if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\r\n              hasWhiteSpace=styleParentTextNode[i].value;\r\n              break;\r\n            }\r\n          }\r\n          // if no 'white-space' style, then deal with white spaces\r\n          if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\r\n          if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\r\n\r\n          // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\r\n          if (['TABLE','THEAD','TBODY','TFOOT','TR','UL','OL'].indexOf(parents[parents.length-1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n          if (text) {\r\n            ret = {'text':text};\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        return '';\r\n      }\r\n      case 1: { // ELEMENT_NODE\r\n        if (!this.showHidden && (element.style.display && element.style.display === 'none') || (element.style.visibility && element.style.visibility === 'hidden')) {\r\n          return;\r\n        }\r\n\r\n        ret.nodeName = nodeName;\r\n        if (element.id) ret.id = element.id;\r\n        parents.push(element);\r\n\r\n        if (element.childNodes && element.childNodes.length>0) {\r\n          [].forEach.call(element.childNodes, function(child) {\r\n            var res = _this.parseElement(child, parents);\r\n            if (res) {\r\n              if (Array.isArray(res.text) && res.text.length===0) res.text='';\r\n              ret.text.push(res);\r\n            }\r\n          });\r\n          //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\r\n          // find if we need a 'stack' instead of a 'text'\r\n          needStack = this.searchForStack(ret);\r\n          if (needStack) {\r\n            ret.stack = ret.text.slice(0);\r\n            delete ret.text;\r\n          } else {\r\n            // apply all the inhirent classes and styles from the parents\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n          }\r\n        }\r\n        parents.pop();\r\n\r\n        switch(nodeName) {\r\n          case \"TABLE\":{\r\n            var rowIndex;\r\n            // the format for the table is table.body[[], [], …]\r\n            ret.table = {body:[]};\r\n\r\n            var tbodies = (ret.stack || ret.text);\r\n            if (Array.isArray(tbodies)) {\r\n              rowIndex = 0;\r\n              // Array with All Rows including THEAD\r\n              var hasRowSpan = false; // TRUE if we have some rowspan\r\n              // first round is to deal with colspan\r\n              // for each THEAD / TBODY\r\n              tbodies.forEach(function(tbody) {\r\n                // for each row\r\n                var rows = (tbody.stack || tbody.text);\r\n                if (Array.isArray(rows)) {\r\n                  rows.forEach(function(row) {\r\n                    var cells = (row.stack || row.text);\r\n                    // for each cell\r\n                    if (Array.isArray(cells)) {\r\n                      ret.table.body[rowIndex] = [];\r\n                      cells.forEach(function(cell) {\r\n                        ret.table.body[rowIndex].push(cell);\r\n                        // do we have a colSpan?\r\n                        // if yes, insert empty cells due to colspan\r\n                        if (cell.colSpan>1) {\r\n                          i = cell.colSpan;\r\n                          // insert an empty cell for each colspan\r\n                          while (--i > 0) {\r\n                            ret.table.body[rowIndex].push({text:''});\r\n                          }\r\n                        }\r\n\r\n                        // do we have a rowSpan ?\r\n                        if (cell.rowSpan > 1) hasRowSpan=true;\r\n                      });\r\n                      rowIndex++;\r\n                    }\r\n                 });\r\n                }\r\n              });\r\n\r\n              if (hasRowSpan) {\r\n                var header = ret.table.body[0];\r\n                if (Array.isArray(header)) {\r\n                  // determine the number of columns\r\n                  var columnsCount = header.length;\r\n                  // determine the number of rows\r\n                  var rowsCount = ret.table.body.length;\r\n\r\n                  // for each column\r\n                  for (var columnInd=0; columnInd<columnsCount; columnInd++) {\r\n                    for (var rowInd=0; rowInd<rowsCount; rowInd++) {\r\n                      var row = ret.table.body[rowInd];\r\n                      if (Array.isArray(row)) {\r\n                        var cell = row[columnInd];\r\n                        // do we have a rowSpan?\r\n                        if (cell.rowSpan>1) {\r\n                          var len = cell.rowSpan;\r\n                          var cs, colspan = (cell.colSpan ? cell.colSpan : 1);\r\n                          for (var j=1; j<=len-1; j++) {\r\n                            cs = colspan;\r\n                            if (ret.table.body[rowInd+j]) {\r\n                              while (cs--) ret.table.body[rowInd+j].splice(columnInd, 0, {text:''});\r\n                            } else {\r\n                              // if we have an empty <tr></tr>\r\n                              cell.rowSpan--;\r\n                            }\r\n                          }\r\n                          // increase rowInd to skip processed rows\r\n                          rowInd += (len-1);\r\n                        }\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n\r\n            // if option tableAutoSize, then we try to apply the correct width/height on the table\r\n            if (this.tableAutoSize) {\r\n              var cellsWidths = [];\r\n              var cellsHeights = [];\r\n              var tableWidths = [];\r\n              var tableHeights = [];\r\n\r\n              // determine if we have \"width:100%\" on the TABLE\r\n              var fullWidth = (element.getAttribute(\"width\") === \"100%\" || element.style.width === \"100%\");\r\n\r\n              // remove everything from percent string except numbers and dot\r\n              var elementAttrWidth = element.getAttribute( \"width\" )||\"\";\r\n              // check if table have width defined\r\n              var tableHaveWidth = (element.style.width||elementAttrWidth).endsWith(\"%\");\r\n              if ( tableHaveWidth ) {\r\n                // get only numbers of percentage\r\n                var tableWidth = (element.style.width||elementAttrWidth).replace( /[^0-9.]/g, \"\" );\r\n              }\r\n\r\n              var tableHaveColgroup = false;\r\n              var tableColgroupIndex = -1;\r\n              // check if any of table children is a colgroup with cells widths\r\n              for ( var x = 0; x < element.children.length; x++ ) {\r\n                var child = element.children[x];\r\n                if ( !tableHaveColgroup ) tableColgroupIndex++;\r\n                if ( child.nodeName.toUpperCase() === \"COLGROUP\" ) tableHaveColgroup = true;\r\n              };\r\n\r\n              ret.table.body.forEach(function(row, rowIndex) {\r\n                cellsWidths.push([]);\r\n                cellsHeights.push([]);\r\n                row.forEach(function(cell, cellIndex) {\r\n                  // we want to remember the different sizes\r\n                  var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\r\n                  if (width === '*') width='auto'; // tinymce could generate 'width:*', but it's invalid, so we use 'auto' instead\r\n                  var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\r\n                  if (height === '*') height='auto'; // tinymce could generate 'height:*', but it's invalid, so we use 'auto' instead\r\n                  // check if we have colspan or rowspan\r\n                  // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\r\n                  if (width !== 'auto' && cell.colSpan>1) {\r\n                    if (!isNaN(width)) width /= cell.colSpan;\r\n                    else width = 'auto';\r\n                  }\r\n                  if (height !== 'auto' && cell.rowSpan>1) {\r\n                    if (!isNaN(height)) height /= cell.rowSpan;\r\n                    else height = 'auto';\r\n                  }\r\n\r\n                  // if we have colgroups defining cells widths\r\n                  if ( tableHaveColgroup ) {\r\n                    var colGroups = element.children[ tableColgroupIndex ];\r\n                    // get colgroup by cell index\r\n                    var colElement = colGroups.children[ cellIndex ];\r\n                    if (colElement) {\r\n                      var colAttrWidth = colElement.getAttribute( \"width\" ) || \"\";\r\n                      var colStyleWidth = colElement.style.width;\r\n\r\n                      if ((colAttrWidth||colStyleWidth).endsWith(\"%\")) {\r\n                        // update cell width to its percentage in colgroup\r\n                        width = (colAttrWidth||colStyleWidth);\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  cellsWidths[rowIndex].push(width);\r\n                  cellsHeights[rowIndex].push(height);\r\n                });\r\n              });\r\n\r\n              // determine the max width for each cell\r\n              cellsWidths.forEach(function(row) {\r\n                row.forEach(function(cellWidth, cellIndex) {\r\n                  var type = typeof tableWidths[cellIndex];\r\n                  if (type === \"undefined\" || (cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex]) || (cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto')) {\r\n                    if ( tableHaveWidth ) {\r\n                      // if table have defined widths we need to make a \r\n                      // rule of three to get cell's proportional width\r\n                      var cellPercentage = cellWidth === 'auto' ? tableWidth / row.length : ( cellWidth.toString().replace( '%', \"\" ) * tableWidth ) / 100;\r\n                      cellWidth = String(cellPercentage) + \"%\";\r\n                    }\r\n\r\n                    tableWidths[cellIndex] = cellWidth;\r\n                  }\r\n                });\r\n              });\r\n              // determine the max height for each row\r\n              cellsHeights.forEach(function(row, rowIndex) {\r\n                row.forEach(function(cellHeight) {\r\n                  var type = typeof tableHeights[rowIndex];\r\n                  if (type === \"undefined\" || (cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex]) || (cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto')) {\r\n                    tableHeights[rowIndex] = cellHeight;\r\n                  }\r\n                });\r\n              });\r\n              if (tableWidths.length > 0) {\r\n                // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\r\n                // then put widths:['*', '*' …], for all columns\r\n                //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\r\n                // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\r\n                // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\r\n                if (fullWidth) tableWidths=tableWidths.map(function(w) { return w==='auto' ? '*' : w });\r\n                ret.table.widths = tableWidths;\r\n              }\r\n              if (tableHeights.length > 0) ret.table.heights = tableHeights;\r\n            }\r\n\r\n            // check if we have some data-pdfmake to apply\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\r\n              dataset = element.dataset.pdfmake;\r\n              if (dataset.charAt(1) === \"'\") dataset=dataset.replace(/'/g,'\"');\r\n              try {\r\n                dataset = JSON.parse(dataset);\r\n                for (key in dataset) {\r\n                  if (key === \"layout\") {\r\n                    ret.layout = dataset[key];\r\n                  } else {\r\n                    ret.table[key] = dataset[key];\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case \"TH\":\r\n          case \"TD\":{\r\n            if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\")*1;\r\n            if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\")*1;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"SVG\": {\r\n            ret = {\r\n              svg:element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\r\n              nodeName:'SVG'\r\n            }\r\n            if (!this.removeTagClasses) ret.style=['html-svg'];\r\n            break;\r\n          }\r\n          case \"BR\": {\r\n            // for BR we return '\\n'\r\n            ret.text = [{text:'\\n'}];\r\n            break;\r\n          }\r\n          case \"SUB\":\r\n          case \"SUP\": {\r\n            ret[nodeName.toLowerCase()] = { offset: '30%', fontSize: 8 };\r\n            break;\r\n          }\r\n          case \"HR\": {\r\n            // default style for the HR\r\n            var styleHR = {\r\n              width: 514,\r\n              type: \"line\",\r\n              margin: [0, 12, 0, 12],\r\n              thickness: 0.5,\r\n              color: \"#000000\",\r\n              left: 0\r\n            };\r\n            // we can override the default HR style with \"data-pdfmake\"\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              dataset = JSON.parse(element.dataset.pdfmake);\r\n              for (key in dataset) {\r\n                styleHR[key] = dataset[key];\r\n              }\r\n            }\r\n\r\n            ret.margin = styleHR.margin;\r\n            ret.canvas = [\r\n              {\r\n                type: styleHR.type,\r\n                x1: styleHR.left,\r\n                y1: 0,\r\n                x2: styleHR.width,\r\n                y2: 0,\r\n                lineWidth: styleHR.thickness,\r\n                lineColor: styleHR.color\r\n              }\r\n            ];\r\n            delete ret.text;\r\n\r\n            break;\r\n          }\r\n          case \"OL\":\r\n          case \"UL\": {\r\n            ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            // check if we have `start`\r\n            if (element.getAttribute(\"start\")) {\r\n              ret.start = element.getAttribute(\"start\")*1;\r\n            }\r\n            // check if we have \"type\"\r\n            switch (element.getAttribute(\"type\")) {\r\n              case 'A': ret.type = 'upper-alpha'; break;\r\n              case 'a': ret.type = 'lower-alpha'; break;\r\n              case 'I': ret.type = 'upper-roman'; break;\r\n              case 'i': ret.type = 'lower-roman'; break;\r\n            }\r\n\r\n            // check if we have `list-style-type` or `list-style`\r\n            if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\r\n            break;\r\n          }\r\n          case \"LI\": {\r\n            // if it's a stack, then check if the last child has a \"text\"\r\n            if (ret.stack && !ret.stack[ret.stack.length-1].text) {\r\n              // if not, we restructure our node\r\n              // by moving the non-stack stuff inside a \"text\"\r\n              text = ret.stack.slice(0, -1);\r\n              ret = [\r\n                {\"text\": text}, // (Array.isArray(text) ? {\"stack\": text} : {\"text\": text}),\r\n                ret.stack[ret.stack.length-1]\r\n              ];\r\n            }\r\n            // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\r\n            if (Array.isArray(ret)) {\r\n              ret = {stack:ret};\r\n            }\r\n            break;\r\n          }\r\n          case \"PRE\":{\r\n            ret.preserveLeadingSpaces = true;\r\n            break;\r\n          }\r\n          case \"IMG\": {\r\n            if (this.imagesByReference) {\r\n              var src = element.getAttribute(\"data-src\") || element.getAttribute(\"src\");\r\n              var index = this.imagesRef.indexOf(src);\r\n              if (index>-1) ret.image = 'img_ref_'+imagesByReferenceSuffix+index;\r\n              else {\r\n                ret.image = 'img_ref_'+imagesByReferenceSuffix+this.imagesRef.length;\r\n                this.imagesRef.push(src);\r\n              }\r\n            } else {\r\n              ret.image = element.getAttribute(\"src\");\r\n            }\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"A\": {\r\n            // the link must be applied to the deeper `text` or stacked element (e.g. `image`)\r\n            var setLink = function(pointer, href) {\r\n              pointer = pointer || {text:''}; // for link without any text\r\n              if (Array.isArray(pointer.text)) {\r\n                pointer.text = pointer.text.map(function(text) {\r\n                  return setLink(text, href);\r\n                });\r\n                return pointer;\r\n              } else if (Array.isArray(pointer.stack)) {\r\n                // if we have a more complex layer\r\n                pointer.stack = pointer.stack.map(function(stack) {\r\n                  return setLink(stack, href);\r\n                });\r\n                return pointer;\r\n              }\r\n              // if 'href' starts with '#' then it's an internal link\r\n              if (href.indexOf('#') === 0) pointer.linkToDestination=href.slice(1);\r\n              else pointer.link = href;\r\n              return pointer;\r\n            }\r\n            if (element.getAttribute(\"href\")) {\r\n              ret = setLink(ret, element.getAttribute(\"href\"));\r\n              // reduce the complexity when only 1 text\r\n              if (Array.isArray(ret.text) && ret.text.length === 1) ret = ret.text[0];\r\n              ret.nodeName = \"A\";\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            // handle other cases\r\n            if (nodeName === \"DIV\" && element.dataset && element.dataset.pdfmakeType === \"columns\") {\r\n              // if it's a <DIV> with data-pdfmake-type=\"columns\"\r\n              // then we interpret it as the COLUMNS in PDFMake\r\n              if (ret.stack) {\r\n                ret.columns = ret.stack;\r\n                delete ret.stack;\r\n              }\r\n            } else if (options && typeof options.customTag === \"function\") {\r\n              // handle custom tags\r\n              ret = options.customTag.call(this, {element:element, parents:parents, ret:ret});\r\n            }\r\n          }\r\n        }\r\n\r\n        // reduce the number of JSON properties\r\n        if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\r\n          ret.text = ret.text[0].text;\r\n        }\r\n\r\n        // check if we have some data-pdfmake to apply\r\n        if (['HR','TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\r\n          dataset = JSON.parse(element.dataset.pdfmake);\r\n          for (key in dataset) {\r\n            ret[key] = dataset[key];\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  this.searchForStack = function(ret) {\r\n    if (Array.isArray(ret.text)) {\r\n      for (var i=0; i<ret.text.length; i++) {\r\n        if (ret.text[i].stack || ['P','DIV','TABLE','SVG','UL','OL','IMG','H1','H2','H3','H4','H5','H6'].indexOf(ret.text[i].nodeName) > -1) return true;\r\n        if (this.searchForStack(ret.text[i]) === true) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\r\n  this.applyStyle = function(params) {\r\n    var cssClass = [];\r\n    var lastIndex = params.parents.length-1;\r\n    var _this = this;\r\n    params.parents.forEach(function(parent, parentIndex) {\r\n      // classes\r\n      var parentNodeName = parent.nodeName.toLowerCase();\r\n      if (!_this.removeTagClasses) {\r\n        var htmlClass = 'html-' + parentNodeName;\r\n        if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\r\n      }\r\n      var parentClass = (parent.getAttribute(\"class\")||\"\").split(' ');\r\n      parentClass.forEach(function(p) {\r\n        if (p) cssClass.push(p);\r\n      });\r\n      // styles\r\n      var style;\r\n      // not all the CSS properties should be inherent\r\n      var ignoreNonDescendentProperties = (parentIndex!==lastIndex);\r\n      // 1) the default styles\r\n      if (_this.defaultStyles[parentNodeName]) {\r\n        for (style in _this.defaultStyles[parentNodeName]) {\r\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\r\n            if (!ignoreNonDescendentProperties ||\r\n                (ignoreNonDescendentProperties &&\r\n                  style.indexOf('margin') === -1 &&\r\n                  style.indexOf('border') === -1\r\n                )\r\n               ) {\r\n              // 'decoration' can be an array\r\n              if (style === 'decoration') {\r\n                if (!Array.isArray(params.ret[style])) params.ret[style]=[];\r\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\r\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\r\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\r\n                }\r\n              } else {\r\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 2) element's style\r\n      // we want TD/TH to receive descendant properties from TR\r\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties=false;\r\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\r\n      style.forEach(function(stl) {\r\n        // 'decoration' can be an array\r\n        if (stl.key === \"decoration\") {\r\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key]=[];\r\n          params.ret[stl.key].push(stl.value);\r\n        } else {\r\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\r\n          // then we should change the correct index in `params.ret.margin` to reflect it\r\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\r\n            // order: left | top | right | bottom\r\n            switch(stl.key) {\r\n              case \"marginLeft\": params.ret.margin[0]=stl.value; break;\r\n              case \"marginTop\": params.ret.margin[1]=stl.value; break;\r\n              case \"marginRight\": params.ret.margin[2]=stl.value; break;\r\n              case \"marginBottom\": params.ret.margin[3]=stl.value; break;\r\n            }\r\n          } else {\r\n            params.ret[stl.key] = stl.value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    if (cssClass.length>0) params.ret.style = cssClass;\r\n    return params.ret;\r\n  }\r\n\r\n  /**\r\n   * Border Value Rearrange a CSS expression (e.g. 'border:solid 10px red' to 'border:10px solid red')\r\n   *\r\n   * @param {String} styleStr The CSS expression values\r\n   * @returns {String} border value in global accepted format (e.g. 'border:10px solid red')\r\n   */\r\n  this.borderValueRearrange = function(styleStr) {\r\n    try {\r\n      var styleArray = styleStr.split(' ');\r\n      if (styleArray.length!==3) return styleStr;\r\n      var v1 = \"0px\", v2 = \"none\", v3 = \"transparent\";\r\n      var style = [\"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"none\", \"hidden\", \"mix\"];\r\n      styleArray.forEach(function (v) {\r\n        if (v.match(/^\\d/)) {\r\n          v1 = v;\r\n        } else if (style.indexOf(v) > -1) {\r\n          v2 = v;\r\n        } else {\r\n          v3 = v;\r\n        }\r\n      });\r\n      return v1 + ' ' + v2 + ' ' + v3;\r\n    } catch (e) {\r\n      return styleStr;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\r\n  this.parseStyle = function(element, ignoreProperties) {\r\n    var style = element.getAttribute(\"style\") || \"\";\r\n    var ret = [];\r\n    style = style.replace(/!important/g, '').split(';');\r\n    // check if we have \"width\" or \"height\"\r\n    var width = element.getAttribute(\"width\");\r\n    var height = element.getAttribute(\"height\");\r\n    if (width) {\r\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\r\n    }\r\n    if (height) {\r\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\r\n    }\r\n    // check if we have 'color' or 'size' -- mainly for '<font>'\r\n    var color = element.getAttribute(\"color\");\r\n    if (color) {\r\n      ret.push({key:\"color\", value:this.parseColor(color).color});\r\n    }\r\n    var size = element.getAttribute(\"size\");\r\n    if (size !== null) {\r\n      // Getting and sanitizing the size value: it should be included between 1 and 7\r\n      size = Math.min(Math.max(1, parseInt(size)), 7);\r\n      // Assigning the font size\r\n      ret.push({key:'fontSize', value:Math.max(this.fontSizes[0], this.fontSizes[size - 1])});\r\n    }\r\n\r\n    var styleDefs = style.map(function(style) { return style.toLowerCase().split(':') });\r\n    var borders = []; // special treatment for borders\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var _this=this;\r\n    styleDefs.forEach(function(styleDef) {\r\n      if (styleDef.length===2) {\r\n        var key = styleDef[0].trim().toLowerCase();\r\n        var value = styleDef[1].trim();\r\n        var res;\r\n        if (_this.ignoreStyles.indexOf(key) === -1) {\r\n          switch (key) {\r\n            case \"margin\": {\r\n              if (ignoreProperties) break;\r\n              // pdfMake uses a different order than CSS\r\n              value = value.split(' ');\r\n              if (value.length===1) value=[value[0], value[0], value[0], value[0]];\r\n              else if (value.length===2) value=[value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\r\n              else if (value.length===3) value=[value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\r\n              else if (value.length===4) value=[value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\r\n\r\n              // we now need to convert to PT\r\n              value.forEach(function(val, i) {\r\n                value[i] = _this.convertToUnit(val);\r\n              });\r\n              // ignore if we have a FALSE in the table\r\n              if (value.indexOf(false) === -1) ret.push({key:key, value:value});\r\n              break;\r\n            }\r\n            case \"line-height\": {\r\n              // change % unit\r\n              if (typeof value === \"string\" && value.slice(-1) === '%') {\r\n                value = value.slice(0,-1) / 100;\r\n              } else {\r\n                value = _this.convertToUnit(value);\r\n              }\r\n              ret.push({key:\"lineHeight\", value:value});\r\n              break;\r\n            }\r\n            case \"text-align\": {\r\n              ret.push({key:\"alignment\", value:value});\r\n              break;\r\n            }\r\n            case \"font-weight\": {\r\n              if (value === \"bold\") ret.push({key:\"bold\", value:true});\r\n              break;\r\n            }\r\n            case \"text-decoration\": {\r\n              // verify the value is valid\r\n              value = _this.toCamelCase(value);\r\n              if ([\"underline\", \"lineThrough\", \"overline\"].includes(value)) {\r\n                ret.push({key:\"decoration\", value:value})\r\n              }\r\n              break;\r\n            }\r\n            case \"font-style\": {\r\n              if (value===\"italic\") ret.push({key:\"italics\", value:true});\r\n              break;\r\n            }\r\n            case \"font-family\": {\r\n              ret.push({\r\n                key: \"font\", value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\r\n                  return g[0].toUpperCase();\r\n                }).replace(/ ([a-z])/g, function (g) {\r\n                  return g[1].toUpperCase();\r\n                })\r\n              });\r\n              break;\r\n            }\r\n            case \"color\": {\r\n              res = _this.parseColor(value);\r\n              ret.push({key:\"color\", value:res.color});\r\n              if (res.opacity < 1) ret.push({key:\"opacity\", value:res.opacity});\r\n              break;\r\n            }\r\n            case \"background-color\": {\r\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\r\n              res = _this.parseColor(value);\r\n              ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\"), value:res.color});\r\n              if (res.opacity < 1) ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillOpacity\" : \"opacity\"), value:res.opacity});\r\n              break;\r\n            }\r\n            case \"text-indent\": {\r\n              ret.push({key:\"leadingIndent\", value:_this.convertToUnit(value)});\r\n              break;\r\n            }\r\n            case \"white-space\": {\r\n              if (value==='nowrap') {\r\n                ret.push({key:\"noWrap\", value:true});\r\n              } else {\r\n                ret.push({key:\"preserveLeadingSpaces\", value:(value==='break-spaces' || value.slice(0,3) === 'pre')});\r\n              }\r\n              break;\r\n            }\r\n            default: {\r\n              // for borders\r\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\r\n                if (!ignoreProperties) borders.push({key:key, value:value});\r\n              } else {\r\n                // ignore some properties\r\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\r\n                // for IMG only (see issue #181)\r\n                if (nodeName === \"IMG\" && (key === 'width' || key === 'height')) {\r\n                  ret.push({key:key, value: _this.convertToUnit(value)});\r\n                  break;\r\n                }\r\n\r\n                // padding is not supported by PDFMake\r\n                if (key.indexOf(\"padding\") === 0) break;\r\n                if (key.indexOf(\"-\") > -1) key=_this.toCamelCase(key);\r\n                if (value) {\r\n                  // convert value to a 'pt' when possible\r\n                  var parsedValue = _this.convertToUnit(value);\r\n                  // if we have 'font-size' with a parsedValue at false, then:\r\n                  // check if it's one of know keywords (like medium, small, x-small, etc), otherwise ignore it\r\n                  if (key === 'fontSize' && parsedValue === false) {\r\n                    if ([\"xx-small\", \"x-small\", \"small\", \"medium\", \"large\", \"x-large\", \"xx-large\", \"xxx-large\"].includes(value)) {\r\n                      // we use 12pt as the medium value\r\n                      switch(value) {\r\n                        case \"xx-small\": value=7.2; break; // 60%\r\n                        case \"x-small\": value=9; break; // 75%\r\n                        case \"small\": value=10.7; break; // 89%\r\n                        case \"medium\": value=12; break;\r\n                        case \"large\": value=14.4; break; // 120%\r\n                        case \"x-large\": value=18; break; // 150%\r\n                        case \"xx-large\": value=24; break; // 200%\r\n                        case \"xxx-large\": value=36; break; // 300%\r\n                      }\r\n                    } else {\r\n                      break;\r\n                    }\r\n                  }\r\n                  ret.push({key:key, value:(parsedValue === false ? value : parsedValue)});\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // for borders\r\n    if (borders.length > 0) {\r\n      // we have to merge together the borders in two properties\r\n      var border = []; // array of boolean\r\n      var borderColor = []; // array of colors\r\n      borders.forEach(function(b) {\r\n        // we have 3 properties: width style color\r\n        b.value = _this.borderValueRearrange(b.value);\r\n        var properties = b.value.split(' ');\r\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g,\"$1$2 \").trim();\r\n        var index = -1, i;\r\n        if (b.key.indexOf('-left') > -1) index=0;\r\n        else if (b.key.indexOf('-top') > -1) index=1;\r\n        else if (b.key.indexOf('-right') > -1) index=2;\r\n        else if (b.key.indexOf('-bottom') > -1) index=3;\r\n        // for the width\r\n        if (index > -1) {\r\n          border[index] = (width > 0);\r\n        } else {\r\n          for (i=0; i<4; i++) border[i] = (width > 0);\r\n        }\r\n        // for the color\r\n        if (properties.length > 2) {\r\n          var color = properties.slice(2).join(' ');\r\n          if (index > -1) {\r\n            borderColor[index] = _this.parseColor(color).color;\r\n          } else {\r\n            for (i=0; i<4; i++) borderColor[i] = _this.parseColor(color).color;\r\n          }\r\n        }\r\n      });\r\n      // fill the gaps\r\n      for (var i=0; i<4; i++) {\r\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i]=true;\r\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i]='#000000';\r\n      }\r\n      if (border.length > 0) ret.push({key:'border', value:border});\r\n      if (borderColor.length > 0) ret.push({key:'borderColor', value:borderColor});\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  this.toCamelCase = function(str) {\r\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\r\n  }\r\n\r\n  // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0–255,0–255,0–255)\"\"\r\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\r\n  this.hsl2rgb = function(h,s,l) {\r\n    var a = s*Math.min(l,1-l);\r\n    var f = function(n) {\r\n      var k=(n+h/30)%12;\r\n      return Math.min(Math.floor((l - a*Math.max(Math.min(k-3,9-k,1),-1))*256),255);\r\n    }\r\n    return \"rgb(\"+f(0)+\",\"+f(8)+\",\"+f(4)+\")\";\r\n  }\r\n\r\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns {color (as hex values for pdfmake), opacity}\r\n   */\r\n  this.parseColor = function(color) {\r\n    var opacity = 1;\r\n    // e.g. `#fff` or `#ff0048`\r\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$', 'i');\r\n\r\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%) or rgba(0,125,250,0.8)\r\n    var rgbRegex = /^rgba?\\(\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?),\\s*(\\d+(\\.\\d+)?%?)(,\\s*\\d+(\\.\\d+)?)?\\)$/;\r\n\r\n    // e.g. hsl(300, 10%, 20%)\r\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\r\n\r\n    // e.g. \"white\" or \"red\"\r\n    var nameRegex = new RegExp('^[a-z]+$', 'i');\r\n\r\n    var decimalColors, decimalValue, hexString, ret=[];\r\n    if (haxRegex.test(color)) {\r\n      return {color:color, opacity:opacity};\r\n    }\r\n\r\n    if (hslRegex.test(color)) {\r\n      // we want to convert to RGB\r\n      decimalColors = hslRegex.exec(color).slice(1);\r\n      // first value should be from 0 to 360\r\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0,-1) * 360 / 100;\r\n      else decimalValue = decimalColors[0]*1;\r\n      ret.push(decimalValue);\r\n      // next values should be % to convert to base 1\r\n      ret.push(decimalColors[2].slice(0,-1) / 100);\r\n      ret.push(decimalColors[4].slice(0,-1) / 100);\r\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\r\n      ret = [];\r\n    }\r\n    if (rgbRegex.test(color)) {\r\n      decimalColors = rgbRegex.exec(color).slice(1).filter(function(v,i) {\r\n        return i%2===0 && typeof v !== \"undefined\";\r\n      });\r\n\r\n      decimalColors.forEach(function(decimalValue, i) {\r\n        // for the alpha number\r\n        if (i === 3) {\r\n          opacity = decimalValue.slice(1)*1;\r\n        } else {\r\n          // if it ends with '%', we calculcate based on 100%=255\r\n          if (decimalValue.endsWith('%')) {\r\n            decimalValue = Math.round(decimalValue.slice(0,-1) * 255 / 100);\r\n          } else decimalValue = decimalValue*1;\r\n          if (decimalValue > 255) {\r\n            decimalValue = 255;\r\n          }\r\n          hexString = '0' + decimalValue.toString(16);\r\n          hexString = hexString.slice(-2);\r\n          ret.push(hexString);\r\n        }\r\n      })\r\n      return {color:'#' + ret.join(''), opacity:opacity};\r\n    }\r\n    if (nameRegex.test(color)) return {color:color, opacity:opacity};\r\n\r\n    console.error('Could not parse color \"' + color + '\"');\r\n    return {color:color, opacity:opacity};\r\n  }\r\n\r\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em'/'in' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\r\n  this.convertToUnit = function(val) {\r\n    // if it's just a number, then return it\r\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val*1;\r\n    var mtch = (val+\"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm|in)$/);\r\n    // if we don't have a number with supported units, then return false\r\n    if (!mtch) return false;\r\n    val = mtch[1];\r\n    switch(mtch[3]) {\r\n      case 'px':{\r\n        val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\r\n        break;\r\n      }\r\n      case 'em':\r\n      case 'rem':{\r\n        val *= 12; // default font-size is 12pt\r\n        break;\r\n      }\r\n      case 'cm':{\r\n        val = Math.round(val * 28.34646); // 1cm => 28.34646\r\n        break;\r\n      }\r\n      case 'in':{\r\n        val *= 72; // 1in => 72 pt\r\n        break;\r\n      }\r\n    }\r\n    return val*1;\r\n  }\r\n\r\n  var result = this.convertHtml(htmlText);\r\n  // if we only pass a string without HTML code\r\n  if (typeof result === \"string\") result={text:result};\r\n  // if images by reference\r\n  if (this.imagesByReference) {\r\n    result = {content:result, images:{}};\r\n    this.imagesRef.forEach(function(src, i) {\r\n      // check if 'src' is a JSON string\r\n      result.images['img_ref_'+imagesByReferenceSuffix+i] = (src.startsWith(\"{\") ? JSON.parse(src) : src);\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = function(htmlText, options) {\r\n  return new htmlToPdfMake(htmlText, options);\r\n}\r\n"],"names":["module","exports","e","a","default","t","_","name","weekdays","split","months","weekdaysShort","monthsShort","weekdaysMin","weekStart","formats","LT","LTS","L","LL","LLL","LLLL","relativeTime","future","past","s","m","mm","h","hh","d","dd","M","MM","y","yy","ordinal","locale","require","htmlToPdfMake","htmlText","options","this","wndw","window","tableAutoSize","imagesByReference","removeExtraBlanks","showHidden","removeTagClasses","ignoreStyles","Array","isArray","imagesByReferenceSuffix","Math","random","toString","slice","fontSizes","defaultStyles","b","bold","strong","u","decoration","del","em","italics","i","h1","fontSize","marginBottom","h2","h3","h4","h5","h6","color","strike","p","margin","ul","marginLeft","table","th","fillColor","imagesRef","changeDefaultStyles","keyStyle","hasOwnProperty","k","ks","convertHtml","parser","DOMParser","replace","parsedHtml","parseFromString","docDef","parseElement","body","stack","text","element","parents","dataset","key","nodeName","toUpperCase","nodeNameLowerCase","toLowerCase","ret","_this","indexOf","nodeType","textContent","styleParentTextNode","parseStyle","length","hasWhiteSpace","findIndex","value","replaceText","applyStyle","style","display","visibility","id","push","childNodes","forEach","call","child","res","searchForStack","pop","rowIndex","tbodies","hasRowSpan","tbody","rows","row","cells","cell","colSpan","rowSpan","header","columnsCount","rowsCount","columnInd","rowInd","cs","len","colspan","j","splice","concat","cellsWidths","cellsHeights","tableWidths","tableHeights","fullWidth","getAttribute","width","elementAttrWidth","tableHaveWidth","endsWith","tableWidth","tableHaveColgroup","tableColgroupIndex","x","children","cellIndex","height","isNaN","colElement","colAttrWidth","colStyleWidth","cellWidth","type","cellPercentage","String","cellHeight","map","w","widths","heights","pdfmake","charAt","JSON","parse","layout","console","error","svg","outerHTML","offset","styleHR","thickness","left","canvas","x1","y1","x2","y2","lineWidth","lineColor","start","listStyle","listStyleType","preserveLeadingSpaces","src","index","image","setLink","pointer","href","linkToDestination","link","pdfmakeType","columns","customTag","params","cssClass","lastIndex","parent","parentIndex","parentNodeName","htmlClass","unshift","ignoreNonDescendentProperties","stringify","stl","borderValueRearrange","styleStr","styleArray","v1","v2","v3","v","match","ignoreProperties","convertToUnit","parseColor","size","min","max","parseInt","styleDefs","borders","styleDef","trim","val","toCamelCase","includes","g","opacity","parsedValue","border","borderColor","properties","join","str","hsl2rgb","l","f","n","floor","decimalColors","decimalValue","hexString","haxRegex","RegExp","rgbRegex","hslRegex","nameRegex","test","exec","filter","round","parseFloat","isFinite","mtch","result","content","images","startsWith"],"sourceRoot":""}