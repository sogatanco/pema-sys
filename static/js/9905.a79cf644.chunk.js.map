{"version":3,"file":"static/js/9905.a79cf644.chunk.js","mappings":"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","sources":["pages/auth/NewPassword.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button, Card, CardBody, Col, Container, FormGroup, Label, Row, Spinner } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { ErrorMessage, Field, Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { ReactComponent as LeftBg } from '../../assets/images/bg/login-bgleft.svg';\r\nimport { ReactComponent as RightBg } from '../../assets/images/bg/login-bg-right.svg';\r\nimport useAxios from '../../hooks/useAxios';\r\n\r\nconst NewPassword = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [isFetching, setIsFetching] = useState(false);\r\n  const [tokenIsValid, setTokenIsValid] = useState(true);\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [isFailed, setIsFailed] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState('');\r\n\r\n  const api = useAxios();\r\n\r\n  const params = new URLSearchParams(window.location.search);\r\n  const token = params.get('key');\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      setIsFetching(true);\r\n      api\r\n        .get(`api/auth/forgot-password/${token}`)\r\n        .then(() => {\r\n          setIsFetching(false);\r\n          setTokenIsValid(true);\r\n        })\r\n        .catch(() => {\r\n          setIsFetching(false);\r\n          setTokenIsValid(false);\r\n        });\r\n    }\r\n    fetchData();\r\n  }, [token]);\r\n\r\n  const initialValues = {\r\n    password: '',\r\n    confirmPassword: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    password: Yup.string()\r\n      .required('Password baru harus diisi')\r\n      .min(8, 'Password harus berisi min. 8 karakter')\r\n      .matches(\r\n        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\r\n        'Harus Berisi 8 Karakter, Satu Huruf Besar, Satu Huruf Kecil, Satu Angka, dan Satu Karakter Khusus',\r\n      ),\r\n    confirmPassword: Yup.string()\r\n      .required('Konfirmasi password harus diisi')\r\n      .oneOf([Yup.ref('password'), null], 'Password harus cocok'),\r\n  });\r\n\r\n  const handleSend = async (data) => {\r\n    setLoading(true);\r\n    data.token = token;\r\n    await api\r\n      .post(`api/auth/new-password`, data)\r\n      .then(() => {\r\n        setIsSuccess(true);\r\n        setIsFailed(false);\r\n        setLoading(false);\r\n        setAlertMessage('Password berhasil diubah. Silakan login kembali.');\r\n        document.getElementById('form-pass').reset();\r\n        setTimeout(() => {\r\n          window.location.href = '/auth/login';\r\n        }, 5000);\r\n      })\r\n      .catch(() => {\r\n        setIsSuccess(false);\r\n        setLoading(false);\r\n        setIsFailed(true);\r\n        setAlertMessage('Gagal mengirim data. Silakan coba lagi');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"loginBox\">\r\n      <LeftBg className=\"position-absolute left bottom-0\" />\r\n      <RightBg className=\"position-absolute end-0 top\" />\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"justify-content-center align-items-center h-100\">\r\n          <Col lg=\"12\" className=\"loginContainer\">\r\n            <Card className=\"rounded-4\">\r\n              {isFetching ? (\r\n                <CardBody className=\"p-4 m-1\">\r\n                  <p className=\"text-center\">Loading..</p>\r\n                </CardBody>\r\n              ) : (\r\n                <CardBody className=\"p-4 m-1\">\r\n                  {!tokenIsValid ? (\r\n                    <div className=\"text-center\">\r\n                      <h4>\r\n                        Link tidak valid atau expired. <br />\r\n                        <i>\r\n                          {' '}\r\n                          <Link to=\"/auth/forgot-password\">Kirim ulang link</Link>\r\n                        </i>\r\n                      </h4>\r\n                    </div>\r\n                  ) : (\r\n                    <Formik\r\n                      initialValues={initialValues}\r\n                      validationSchema={validationSchema}\r\n                      onSubmit={(fields) => handleSend(fields)}\r\n                    >\r\n                      {({ errors, touched }) => (\r\n                        <>\r\n                          {isFailed ||\r\n                            (!isSuccess && <h4 className=\"text-center\">{alertMessage}</h4>)}\r\n                          <Form id=\"form-pass\">\r\n                            <FormGroup>\r\n                              <Label htmlFor=\"password\" className=\"text-center\">\r\n                                Password Baru\r\n                              </Label>\r\n                              <Field\r\n                                id=\"password\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                autoComplete=\"on\"\r\n                                className={`form-control${\r\n                                  errors.password && touched.password ? ' is-invalid' : ''\r\n                                } rounded-3`}\r\n                              />\r\n                              <ErrorMessage\r\n                                name=\"password\"\r\n                                component=\"div\"\r\n                                className=\"invalid-feedback\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                              <Label htmlFor=\"confirmPassword\" className=\"text-center\">\r\n                                Konfirmasi Password Baru\r\n                              </Label>\r\n                              <Field\r\n                                id=\"confirmPassword\"\r\n                                name=\"confirmPassword\"\r\n                                type=\"password\"\r\n                                autoComplete=\"on\"\r\n                                className={`form-control${\r\n                                  errors.confirmPassword && touched.confirmPassword\r\n                                    ? ' is-invalid'\r\n                                    : ''\r\n                                } rounded-3`}\r\n                              />\r\n                              <ErrorMessage\r\n                                name=\"confirmPassword\"\r\n                                component=\"div\"\r\n                                className=\"invalid-feedback\"\r\n                              />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                              <div className=\"d-grid gap-2\">\r\n                                <Button\r\n                                  type=\"submit\"\r\n                                  color=\"primary\"\r\n                                  className=\"btn btn-primary btn-block mb-1 rounded-3\"\r\n                                  disabled={loading}\r\n                                >\r\n                                  {loading ? (\r\n                                    <>\r\n                                      <Spinner className=\"me-2\" size=\"sm\" color=\"light\" />\r\n                                      loading ..\r\n                                    </>\r\n                                  ) : (\r\n                                    'Submit'\r\n                                  )}\r\n                                </Button>\r\n                              </div>\r\n                            </FormGroup>\r\n                          </Form>\r\n                        </>\r\n                      )}\r\n                    </Formik>\r\n                  )}\r\n                </CardBody>\r\n              )}\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n"],"names":["NewPassword","loading","setLoading","useState","isFetching","setIsFetching","tokenIsValid","setTokenIsValid","isSuccess","setIsSuccess","isFailed","setIsFailed","alertMessage","setAlertMessage","api","useAxios","token","URLSearchParams","window","location","search","get","useEffect","async","concat","then","catch","fetchData","validationSchema","Yup","shape","password","required","min","matches","confirmPassword","oneOf","_jsxs","className","children","_jsx","LeftBg","RightBg","Container","fluid","Row","Col","lg","Card","CardBody","Formik","initialValues","onSubmit","fields","data","post","document","getElementById","reset","setTimeout","href","handleSend","_ref","errors","touched","_Fragment","Form","id","FormGroup","Label","htmlFor","Field","name","type","autoComplete","ErrorMessage","component","Button","color","disabled","Spinner","size","Link","to"],"sourceRoot":""}