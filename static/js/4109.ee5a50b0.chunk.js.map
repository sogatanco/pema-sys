{"version":3,"file":"static/js/4109.ee5a50b0.chunk.js","mappings":"gVASA,MA6GA,EA7GuBA,KACrB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAaC,IAAkBF,EAAAA,EAAAA,WAAS,IACxCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAYC,IAAiBN,EAAAA,EAAAA,UAAS,IAEvCO,GAAWC,EAAAA,EAAAA,MACXC,GAAMC,EAAAA,EAAAA,KAMNC,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAAaE,MAAM,oBAAoBC,SAAS,uBAuBzD,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACH,UAAU,qCAClBE,EAAAA,EAAAA,KAACE,EAAAA,EAAO,CAACJ,UAAU,iCACnBE,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CAACC,OAAK,EAACN,UAAU,QAAOC,UAChCC,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACP,UAAU,kDAAiDC,UAC9DC,EAAAA,EAAAA,KAACM,EAAAA,EAAG,CAACC,GAAG,KAAKT,UAAU,iBAAgBC,UACrCC,EAAAA,EAAAA,KAACQ,EAAAA,EAAI,CAACV,UAAU,YAAWC,UACzBF,EAAAA,EAAAA,MAACY,EAAAA,EAAQ,CAACX,UAAU,UAASC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAaC,UAC1BC,EAAAA,EAAAA,KAAA,MAAAD,SACGjB,EAAc,iBAAmBE,EAAUE,EAAa,qBAG5DJ,GACCkB,EAAAA,EAAAA,KAAA,KAAGF,UAAU,cAAaC,SAAC,uDAE3BC,EAAAA,EAAAA,KAACU,EAAAA,GAAM,CACLC,cA9CI,CACpBhB,MAAO,IA8CSH,iBAAkBA,EAClBoB,SAAWC,GAxCVC,WACjBlC,GAAW,SAELU,EACHyB,KAAK,2BAA4BC,GACjCC,MAAK,KACJrC,GAAW,GACXG,GAAe,GAEfmC,YAAW,KACT9B,EAAS,cAAc,GACtB,IAAK,IAET+B,OAAOC,IACNxC,GAAW,GACXK,GAAW,GACXE,EAAciC,EAAIC,SAASL,KAAKM,QAAQ,GACxC,EAuBkCC,CAAWV,GAAQd,SAExCyB,IAAA,IAAC,OAAEC,EAAM,QAAEC,GAASF,EAAA,OACnB3B,EAAAA,EAAAA,MAAC8B,EAAAA,GAAI,CAAA5B,SAAA,EACHF,EAAAA,EAAAA,MAAC+B,EAAAA,EAAS,CAAA7B,SAAA,EACRC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAK,CAACC,QAAQ,QAAQhC,UAAU,cAAaC,SAAC,4GAI/CC,EAAAA,EAAAA,KAAC+B,EAAAA,GAAK,CACJC,GAAG,QACHC,KAAK,QACLC,KAAK,OACLC,aAAa,KACbrC,UAAY,eACV2B,EAAO9B,OAAS+B,EAAQ/B,MAAQ,cAAgB,kBAGpDK,EAAAA,EAAAA,KAACoC,EAAAA,GAAY,CAACH,KAAK,QAAQI,UAAU,MAAMvC,UAAU,yBAEvDE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAAA7B,UACRC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CACLJ,KAAK,SACLK,MAAM,UACNzC,UAAU,2CACV0C,SAAU7D,EAAQoB,SAEjBpB,GACCkB,EAAAA,EAAAA,MAAA4C,EAAAA,SAAA,CAAA1C,SAAA,EACEC,EAAAA,EAAAA,KAAC0C,EAAAA,EAAO,CAAC5C,UAAU,OAAO6C,KAAK,KAAKJ,MAAM,UAAU,gBAItD,eAKH,iBASnB,C","sources":["pages/auth/ForgotPassword.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Button, Card, CardBody, Col, Container, FormGroup, Label, Row, Spinner } from 'reactstrap';\r\nimport { ErrorMessage, Field, Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { ReactComponent as LeftBg } from '../../assets/images/bg/login-bgleft.svg';\r\nimport { ReactComponent as RightBg } from '../../assets/images/bg/login-bg-right.svg';\r\nimport useAxios from '../../hooks/useAxios';\r\n\r\nconst ForgotPassword = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [isEmailSent, setIsEmailSent] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [errMessage, setErrMessage] = useState('');\r\n\r\n  const navigate = useNavigate();\r\n  const api = useAxios();\r\n\r\n  const initialValues = {\r\n    email: '',\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email('Email is invalid').required('Email is required'),\r\n  });\r\n\r\n  const handleSend = async (data) => {\r\n    setLoading(true);\r\n\r\n    await api\r\n      .post('api/auth/forgot-password', data)\r\n      .then(() => {\r\n        setLoading(false);\r\n        setIsEmailSent(true);\r\n\r\n        setTimeout(() => {\r\n          navigate('/auth/login');\r\n        }, 7000);\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n        setIsError(true);\r\n        setErrMessage(err.response.data.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"loginBox\">\r\n      <LeftBg className=\"position-absolute left bottom-0\" />\r\n      <RightBg className=\"position-absolute end-0 top\" />\r\n      <Container fluid className=\"h-100\">\r\n        <Row className=\"justify-content-center align-items-center h-100\">\r\n          <Col lg=\"12\" className=\"loginContainer\">\r\n            <Card className=\"rounded-4\">\r\n              <CardBody className=\"p-4 m-1\">\r\n                <div className=\"text-center\">\r\n                  <h4>\r\n                    {isEmailSent ? 'Email Terkirim' : isError ? errMessage : 'Lupa Password?'}\r\n                  </h4>\r\n                </div>\r\n                {isEmailSent ? (\r\n                  <p className=\"text-center\">Silakan cek email untuk mengatur ulang kata sandi</p>\r\n                ) : (\r\n                  <Formik\r\n                    initialValues={initialValues}\r\n                    validationSchema={validationSchema}\r\n                    onSubmit={(fields) => handleSend(fields)}\r\n                  >\r\n                    {({ errors, touched }) => (\r\n                      <Form>\r\n                        <FormGroup>\r\n                          <Label htmlFor=\"email\" className=\"text-center\">\r\n                            Masukkan alamat email @ptpema.co.id sistem akan mengirimkan instruksi\r\n                            untuk mengatur ulang kata sandi.\r\n                          </Label>\r\n                          <Field\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"text\"\r\n                            autoComplete=\"on\"\r\n                            className={`form-control${\r\n                              errors.email && touched.email ? ' is-invalid' : ''\r\n                            } rounded-3`}\r\n                          />\r\n                          <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                          <div className=\"d-grid gap-2\">\r\n                            <Button\r\n                              type=\"submit\"\r\n                              color=\"primary\"\r\n                              className=\"btn btn-primary btn-block mb-1 rounded-3\"\r\n                              disabled={loading}\r\n                            >\r\n                              {loading ? (\r\n                                <>\r\n                                  <Spinner className=\"me-2\" size=\"sm\" color=\"light\" />\r\n                                  loading ..\r\n                                </>\r\n                              ) : (\r\n                                'Send'\r\n                              )}\r\n                            </Button>\r\n                          </div>\r\n                        </FormGroup>\r\n                      </Form>\r\n                    )}\r\n                  </Formik>\r\n                )}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n"],"names":["ForgotPassword","loading","setLoading","useState","isEmailSent","setIsEmailSent","isError","setIsError","errMessage","setErrMessage","navigate","useNavigate","api","useAxios","validationSchema","Yup","shape","email","required","_jsxs","className","children","_jsx","LeftBg","RightBg","Container","fluid","Row","Col","lg","Card","CardBody","Formik","initialValues","onSubmit","fields","async","post","data","then","setTimeout","catch","err","response","message","handleSend","_ref","errors","touched","Form","FormGroup","Label","htmlFor","Field","id","name","type","autoComplete","ErrorMessage","component","Button","color","disabled","_Fragment","Spinner","size"],"sourceRoot":""}